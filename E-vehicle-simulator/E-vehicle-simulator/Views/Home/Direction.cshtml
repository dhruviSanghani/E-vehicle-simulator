@model E_vehicle_simulator.Models.EvCarModel

@{
    ViewData["Title"] = "Direction";
}
<div class="container">    
<main role="main" class="pb-3">
   @* <div class="modal" tabindex="-1" role="dialog">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Modal title</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
       <span class="label label-default">Click on marker for Start location</span>
    <label id="lblstart"></label><br>

    <span class="label label-default">Click on marker for End location</span>
    <label id="lblend"></label>
    <lable id="lblmcount" style="visibility:hidden"></lable><br>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-primary" onclick="loadDoc()">Direction</button>
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>
<div class="jumbotron">
  <h1 class="display-4">Hello, world!</h1>
  <p class="lead">Click on marker for Start location</p>
   <label id="lblstart"></label>
  <hr class="my-4">
  <p>Click on marker for End location</p>
  <label id="lblend"></label>
  <p class="lead">
      <button type="button" class="btn btn-primary btn-lg" onclick="loadDoc()"  role="button">Direction</button>
  </p>
</div>*@
<div class="Overdiv">
   <label class="label label-default">Selected Car: @Model.CarModelName</label><br />
    <label class="col-form-label">Max charge capacity: @Model.MaxCharge</label><br />
   <label class="col-form-label">Click on marker:</label><br />
    <span class="label label-default">Select Start location: </span>
    <label id="lblstart"></label><br>

    <span class="label label-default">Select End location: </span>
    <label id="lblend"></label>
    <lable id="lblmcount" style="visibility:hidden"></lable><br>

    <span class="label label-default">Car's Current Charginglevel</span>
    <label id="lblend"></label>
    <input id="txtinitcharge" type="text" style="margin-bottom:5px"/><br>


    <button type="button" class="btn btn-outline-success" onclick="loadDoc()" style="float:right">Show direction</button>
</div>
<div id="map"></div>
</main>
</div>

@section Scripts{
    <script>       
                      

        function loadDoc() {
            var myLayer = L.geoJSON().addTo(map);
            var chargeIcon = L.icon({
                iconUrl: '../../evicon.png',
                iconSize:     [50, 50], // size of the icon
                iconAnchor:   [22, 22], // point of the icon which will correspond to marker's location
                popupAnchor:  [-3, -76] // point from which the popup should open relative to the iconAnchor
            });
            if ($("#lblstart").text() != null && $("#lblend").text()) {
                $.ajax({
                    type: "GET",
                    dataType: 'json',
                    //url: "https://api.mapbox.com/directions/v5/mapbox/driving/" + $("#lblstart").text() + ";" + $("#lblend").text() + "?geometries=geojson&overview=full&engine=electric&ev_initial_charge=600&ev_max_charge=5000&ev_connector_types=ccs_combo_type1,ccs_combo_type2&energy_consumption_curve=0,300;20,160;80,140;120,180&ev_charging_curve=0,100000;40000,70000;60000,30000;80000,10000&ev_min_charge_at_charging_station=1&access_token=pk.eyJ1IjoiZGhydXZpMTEiLCJhIjoiY2w0dDl0dmVyMDZqMjNpdWx6d2ljc2VvNCJ9.jrAkjQJMMPUio0hwOAu-pg&steps=true",
                    url: "https://router.hereapi.com/v8/routes?departureTime=any&ev[connectorTypes]=@Model.ChargingType.ToString()&transportMode=car&return=summary,polyline&ev[freeFlowSpeedTable]=@Model.EnergyConsumption.ToString()&ev[trafficSpeedTable]=0,0.349,27,0.319,45,0.329,60,0.266,75,0.287,90,0.318,100,0.33,110,0.335,120,0.35,130,0.36,250,0.36&ev[auxiliaryConsumption]=1.8&ev[ascent]=9&ev[descent]=4.3&ev[makeReachable]=true&ev[initialCharge]=" + $("#txtinitcharge").val().trim() + "&ev[maxCharge]=@Model.MaxCharge.ToString()&ev[chargingCurve]=@Model.ChargingCurve.ToString()&ev[maxChargeAfterChargingStation]=72&apikey=_833T-Cuiz0sanFvX6aiCTeEBCoeNpvCenxv6mZ7v4M"
                        + "&origin=" + $("#lblstart").text().split(",")[1] + "," + $("#lblstart").text().split(",")[0] + "&destination=" + $("#lblend").text().split(",")[1] + "," + $("#lblend").text().split(",")[0],
                    async: true,
                    contentType: "application/json; charset=utf-8",
                    success: function(msg) {
                        //console.log(msg);

                        if (msg.notices == null) {

                            //var geojsonFeature = {
                            //      "type": "Feature",
                            //      "properties": {
                            //          "name": "Coors Field",
                            //          "amenity": "Baseball Stadium",
                            //          "popupContent": "This is where the Rockies play!"
                            //      },
                            //    "geometry": {
                            //    "coordinates": null,
                            //    "type": "LineString"
                            //    }
                            //  };
                            //TODO: HANDLE NO ROUTE POSSIBLE TO DESTINATION
                            msg.routes[0].sections.forEach(function(item, index) {
                                console.log(item, index);
                                var deco = decode(item.polyline)
                                //console.log(deco);
                                var geojsonFeature = {
                                    "type": "Feature",
                                    "properties": {
                                        "name": "Coors Field",
                                        "amenity": "Baseball Stadium",
                                        "popupContent": "This is where the Rockies play!"
                                    },
                                    "geometry": {
                                        "coordinates": null,
                                        "type": "LineString"
                                    }
                                };
                                geojsonFeature.geometry.coordinates = deco.polyline;
                                //console.log(geojsonFeature);
                                myLayer.addData(geojsonFeature)

                                if (item.arrival != null && item.arrival.place.type == 'chargingStation') {

                                    var tb = '<table id="customers">';

                                    for (const [key, value] of Object.entries(item.arrival.place.attributes)) {
                                        tb += '<tr>';
                                        tb += '<td>' + key + '</td>' + '<td>' + value + '</td>';
                                        tb += '</tr>';
                                    }
                                    tb += '</table>';

                                    L.marker([item.arrival.place.location.lat, item.arrival.place.location.lng], { icon: chargeIcon }).bindPopup(item.arrival.place.name + "\n" + tb).addTo(map);
                                    //JSON.stringify(item.arrival.place.attributes)
                                }

                            });



                            //geojsonFeature.geometry = msg.routes[0].geometry;
                            //console.log(geojsonFeature);
                            //var markers = new L.MarkerClusterGroup();
                            //for (var i in msg.waypoints) {
                            //    var row = msg.waypoints[i];

                            //    var marker = L.marker([row.location[1], row.location[0]], {
                            //        opacity: 1
                            //    }).bindPopup(row.name);
                            //    markers.addLayer(marker);
                            //    marker.addTo(map);
                            //}

                            //myLayer.addData(geojsonFeature);
                        }
                        else {
                            window.alert(msg.notices[0].title);
                        }
                    }
                });
            }
        }
    </script>


    <script type="text/javascript">
        // london cordinate 42.995120541981635, -81.2451841000309
        var map = L.map('map', {
            fullscreenControl: {
                pseudoFullscreen: false
            }
        }).setView([42.995120541981635, -81.2451841000309], 8);

        function onMapClick(e) {
            if ($("#lblmcount").text() == "") {
                $("#lblmcount").text("1");
            }
            else {
                $("#lblmcount").text(parseFloat($("#lblmcount").text()) + 1);
            }
            if (parseFloat($("#lblmcount").text()) <= 2) {
                if ($("#lblstart").text() == "") {
                    $("#lblstart").text(e.latlng.lng + "," + e.latlng.lat);
                     var marker = L.marker(e.latlng).addTo(map);
                     marker.bindPopup("<b>Start Location is </b>" + e.latlng).openPopup();
                }
                else {
                    $("#lblend").text(e.latlng.lng + "," + e.latlng.lat);
                     var marker = L.marker(e.latlng).addTo(map);
                     marker.bindPopup("<b>Destination is </b>" + e.latlng).openPopup();
                }
               
            }
        }

        map.on('click', onMapClick);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            maxZoom: 19,
            attribution: '© OpenStreetMap'
        }).addTo(map);

        const DEFAULT_PRECISION = 5;

        const ENCODING_TABLE = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";

        const DECODING_TABLE = [
            62, -1, -1, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1,
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
            22, 23, 24, 25, -1, -1, -1, -1, 63, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
            36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51
        ];

        const FORMAT_VERSION = 1;

        const ABSENT = 0;
        const LEVEL = 1;
        const ALTITUDE = 2;
        const ELEVATION = 3;
        // Reserved values 4 and 5 should not be selectable
        const CUSTOM1 = 6;
        const CUSTOM2 = 7;

        const Num = typeof BigInt !== "undefined" ? BigInt : Number;

        function decode(encoded) {
            //var encoded = document.getElementById("encoded-polyline").value;
            const decoder = decodeUnsignedValues(encoded);
            const header = decodeHeader(decoder[0], decoder[1]);

            const factorDegree = 10 ** header.precision;
            const factorZ = 10 ** header.thirdDimPrecision;
            const { thirdDim } = header;

            let lastLat = 0;
            let lastLng = 0;
            let lastZ = 0;
            const res = [];

            let i = 2;
            for (; i < decoder.length;) {
                const deltaLat = toSigned(decoder[i]) / factorDegree;
                const deltaLng = toSigned(decoder[i + 1]) / factorDegree;
                lastLat += deltaLat;
                lastLng += deltaLng;

                if (thirdDim) {
                    const deltaZ = toSigned(decoder[i + 2]) / factorZ;
                    lastZ += deltaZ;
                    res.push([lastLng, lastLat, lastZ]);
                    i += 3;
                } else {
                    res.push([lastLng,lastLat]);
                    i += 2;
                }
            }

            if (i !== decoder.length) {
                throw new Error('Invalid encoding. Premature ending reached');
            }

            var x = {
                ...header,
                polyline: res,
            };


            //document.getElementById("geojson").value = JSON.stringify(x);

            return {
                ...header,
                polyline: res,
            };
        }

        function decodeChar(char) {
            const charCode = char.charCodeAt(0);
            return DECODING_TABLE[charCode - 45];
        }

        function decodeUnsignedValues(encoded) {
            let result = Num(0);
            let shift = Num(0);
            const resList = [];

            encoded.split('').forEach((char) => {
                const value = Num(decodeChar(char));
                result |= (value & Num(0x1F)) << shift;
                if ((value & Num(0x20)) === Num(0)) {
                    resList.push(result);
                    result = Num(0);
                    shift = Num(0);
                } else {
                    shift += Num(5);
                }
            });

            if (shift > 0) {
                throw new Error('Invalid encoding');
            }

            return resList;
        }

        function decodeHeader(version, encodedHeader) {
            if (+version.toString() !== FORMAT_VERSION) {
                throw new Error('Invalid format version');
            }
            const headerNumber = +encodedHeader.toString();
            const precision = headerNumber & 15;
            const thirdDim = (headerNumber >> 4) & 7;
            const thirdDimPrecision = (headerNumber >> 7) & 15;
            return { precision, thirdDim, thirdDimPrecision };
        }

        function toSigned(val) {
            // Decode the sign from an unsigned value
            let res = val;
            if (res & Num(1)) {
                res = ~res;
            }
            res >>= Num(1);
            return +res.toString();
        }

        function encode({ precision = DEFAULT_PRECISION, thirdDim = ABSENT, thirdDimPrecision = 0, polyline }) {
            // Encode a sequence of lat,lng or lat,lng(,{third_dim}). Note that values should be of type BigNumber
            //   `precision`: how many decimal digits of precision to store the latitude and longitude.
            //   `third_dim`: type of the third dimension if present in the input.
            //   `third_dim_precision`: how many decimal digits of precision to store the third dimension.

            const multiplierDegree = 10 ** precision;
            const multiplierZ = 10 ** thirdDimPrecision;
            const encodedHeaderList = encodeHeader(precision, thirdDim, thirdDimPrecision);
            const encodedCoords = [];

            let lastLat = Num(0);
            let lastLng = Num(0);
            let lastZ = Num(0);
            polyline.forEach((location) => {
                const lat = Num(Math.round(location[0] * multiplierDegree));
                encodedCoords.push(encodeScaledValue(lat - lastLat));
                lastLat = lat;

                const lng = Num(Math.round(location[1] * multiplierDegree));
                encodedCoords.push(encodeScaledValue(lng - lastLng));
                lastLng = lng;

                if (thirdDim) {
                    const z = Num(Math.round(location[2] * multiplierZ));
                    encodedCoords.push(encodeScaledValue(z - lastZ));
                    lastZ = z;
                }
            });

            return [...encodedHeaderList, ...encodedCoords].join('');
        }

        function encodeHeader(precision, thirdDim, thirdDimPrecision) {
            // Encode the `precision`, `third_dim` and `third_dim_precision` into one encoded char
            if (precision < 0 || precision > 15) {
                throw new Error('precision out of range. Should be between 0 and 15');
            }
            if (thirdDimPrecision < 0 || thirdDimPrecision > 15) {
                throw new Error('thirdDimPrecision out of range. Should be between 0 and 15');
            }
            if (thirdDim < 0 || thirdDim > 7 || thirdDim === 4 || thirdDim === 5) {
                throw new Error('thirdDim should be between 0, 1, 2, 3, 6 or 7');
            }

            const res = (thirdDimPrecision << 7) | (thirdDim << 4) | precision;
            return encodeUnsignedNumber(FORMAT_VERSION) + encodeUnsignedNumber(res);
        }

        function encodeUnsignedNumber(val) {
            // Uses variable integer encoding to encode an unsigned integer. Returns the encoded string.
            let res = '';
            let numVal = Num(val);
            while (numVal > 0x1F) {
                const pos = (numVal & Num(0x1F)) | Num(0x20);
                res += ENCODING_TABLE[pos];
                numVal >>= Num(5);
            }
            return res + ENCODING_TABLE[numVal];
        }

        function encodeScaledValue(value) {
            // Transform a integer `value` into a variable length sequence of characters.
            //   `appender` is a callable where the produced chars will land to
            let numVal = Num(value);
            const negative = numVal < 0;
            numVal <<= Num(1);
            if (negative) {
                numVal = ~numVal;
            }

            return encodeUnsignedNumber(numVal);
        }

    </script>
}

